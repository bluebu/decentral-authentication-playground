package nimbus_jose_jwt.private_public.vulnerability.tests;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWSVerifier;
import com.nimbusds.jose.crypto.RSASSAVerifier;
import com.nimbusds.jwt.SignedJWT;
import example_keys.Alice;
import nimbus_jose_jwt.private_public.NimbusProvider;
import nimbus_jose_jwt.private_public.RsaPublicKey_from_PHP_counterpart;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonReader;
import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;
import java.security.interfaces.RSAPublicKey;
import java.text.ParseException;

/**
 * See:
 * https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/
 * <p>
 * Two possible issues to test
 * (1) None algorithm
 * (2) RSA or HMAC?
 */
public class NimbusVerifyRsaOrHmacVulnerabilityTest {

  public static void main(String[] args) {
    boolean vulnerable = true;
    try {
      /*
        {
          "kid": "id-0815",
          "alg": "RS256"
        }
        {
           "sub": "alice",
            "iss": "http://example.com",
            "iat": 1427919850
        }
        ... signature
       */

      String token = new NimbusProvider().create();

      token = modify_token(token);

      NimbusVerifyRsaOrHmacVulnerabilityTest verifier = new NimbusVerifyRsaOrHmacVulnerabilityTest();
      verifier.verify(token, Alice.getPublicKey());
      System.out.println("-------");
      verifier.verify(tokenFromPhpExampleCode(), RsaPublicKey_from_PHP_counterpart.createPublicKey());
    } catch (JOSEException e) {
      // EXPECTED com.nimbusds.jose.JOSEException: The "HS256" algorithm is not accepted by the JWS verifier
      vulnerable = !e.getMessage().contains("algorithm is not accepted");
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    if (vulnerable) {
      throw new RuntimeException("ERROR! Modifying the header algorithm leads to verified token. THIS IS A SECURITY VULNERABILITY and should be fixed!!!");
    }
  }

  private static String modify_token(String token) throws UnsupportedEncodingException {
    String[] parts = token.split("[.]");
    String header = modify_header_alg_to_hmac(parts[0]);
    String payload = parts[1];
    String signature = modify_signature_none(parts[2]);
    return header + "." + payload + "." + signature;
  }

  private static String modify_header_alg_to_hmac(String headerAsBase64) throws UnsupportedEncodingException {
    /*
     Modify to
      {
      "kid": "id-0815",
      "alg": "HS256"
      }
     */
    JsonReader jsonReader = Json.createReader(new ByteArrayInputStream(Base64.decode(headerAsBase64)));
    JsonObject headerObjSrc = jsonReader.readObject();
    JsonObjectBuilder headerObjCopy = Json.createObjectBuilder();
    for (String key : headerObjSrc.keySet()) {
      if ("alg".equals(key)) {
        headerObjCopy.add("alg", "HS256");
      } else {
        headerObjCopy.add(key, headerObjSrc.get(key));
      }
    }
    return Base64.encodeUrlSafeToString(headerObjCopy.build().toString().getBytes("UTF-8"));
  }

  private static String modify_signature_none(String signatureAsBase64) {
    return Base64.encodeUrlSafeToString(new byte[0]);
  }

  public void verify(String token, RSAPublicKey publicKey) throws ParseException, JOSEException {
    SignedJWT signedJWT = SignedJWT.parse(token);
    System.out.println("Used KeyID: " + signedJWT.getHeader().getKeyID());

    JWSVerifier verifier = new RSASSAVerifier(publicKey);
    boolean verified = signedJWT.verify(verifier);
    System.out.println("JWS Signature is valid: " + verified);

    System.out.println("JWS payload, subject: " + signedJWT.getJWTClaimsSet().getSubject());
  }

  private static String tokenFromPhpExampleCode() {
    return "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImlkLTA4MTUifQ.eyJzdWIiOiJzb21lb25lQGV4YW1wbGUuY29tIiwiZXhwIjoxNDE0MjMzODg4fQ.WHw6fYPcdJsn2qmBF8OEqLm8zABhyWXY3H9a6CM-hWgvgD7PwxSDBahz-0-OrqTeBF_6afD63PTGLMAEGKKbmZbPxMorRqZ9e4tSqyR9v2rRBlqeSuP0kNUySEeDmPskNyc8oh_bcI-xU5XodMsqYqk-H_38cymDclWTEB9tUYI";
  }

}
